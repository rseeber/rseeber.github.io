<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>River&#39;s Blog</title>
  <subtitle>A blog about whatever technical stuff I feel like talking about today</subtitle>
  <link href="https://rseeber.github.io/feed.xml" rel="self" />
  <link href="https://rseeber.github.io/blog/" />
  <updated>2025-07-16T22:31:38Z</updated>
  <id>https://rseeber.github.io/blog/</id>
  <author>
    <name>River Seeber</name>
    <email>riverseeber12@gmail.com</email>
  </author>
  <entry>
    <title>Use Technology Creatively</title>
    <link href="https://rseeber.github.io/post/use-technology-creatively/" />
    <updated>2025-07-16T22:31:38Z</updated>
    <id>https://rseeber.github.io/post/use-technology-creatively/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;July 16, 2025&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Email is magic&lt;/h1&gt;
&lt;p&gt;A good email client is like magic. As technologists, it&#39;s easy to lean into the world of the terminal and operating system, messing around with our Linux installations, Desktop Environments, or other things. It&#39;s easy to lean into this world and see this part as the &amp;quot;real world of computing&amp;quot;, and then look at many of the more business and corporate tools such as email and Office Suites (like Microsoft Office or LibreOffice) as the boring technology, stripped of life.&lt;/p&gt;
&lt;p&gt;After all, look at your email inbox that you&#39;re forced to use for every service you sign up for. It&#39;s littered with corporate newsletters you didn&#39;t sign up for, advertisements from companies you don&#39;t even have an account with, and political updates from politicians who you thoughts you would care about when you signed up, but you&#39;ve received over 25 messages in a row so far that have remained unread. (Well, that&#39;s my experience anyways).&lt;/p&gt;
&lt;p&gt;It&#39;s easy to look at this and simply blame the corporate style of technology. But email isn&#39;t actually a bad technology, it&#39;s just that most people don&#39;t realize how good it can be if you simply take a few small proactive steps to improve your experience.&lt;/p&gt;
&lt;h2&gt;Manage Your Subscriptions&lt;/h2&gt;
&lt;p&gt;Step number one to gain control is to manage how many new messages are coming in to your inbox. My preferred method for this is to maintain two email accounts. The first account you identify as &lt;em&gt;your email account&lt;/em&gt;. It&#39;s the email you list on your website, and it&#39;s the one you give to contacts. You also will give it to any services for which you &lt;em&gt;actively want to recieve updates from&lt;/em&gt;. Not weird marketing emails from a service you don&#39;t care to use for more than a week after signing up. Not sales ads from an online store you bought one thing from 2 months ago. Updates that you specifically, intentionally thought to yourself, &amp;quot;yeah, I think I want to get emails from these people, that would enrich my life or help me out in some way.&amp;quot; For the other services, the ones that send you junk mail you don&#39;t care for, but which you still need an email to sign up with, you sign up through your second email. This inbox does not get checked unless they tell you to check it for something like a 2FA code or a password reset or something like that.&lt;/p&gt;
&lt;p&gt;The majority of services you use shouldn&#39;t get access to your &amp;quot;real&amp;quot; inbox, they get access to the secondary one. The one you don&#39;t check. This reduces the amount of messages you get in your first inbox, allowing you to actually read those few numbers of emails that actually &lt;em&gt;do matter&lt;/em&gt;. It also means you can confidently hand your email out to contacts and not get stressed out to the prospect of having to check it once in a while so that you don&#39;t miss their message. Herman from Bearblogs mentions something along the lines of this strategy in his post about digital hygiene.
&lt;br&gt;
&lt;br&gt;
  &lt;a href=&quot;https://herman.bearblog.dev/digital-hygiene-emails/&quot;&gt;https://herman.bearblog.dev/digital-hygiene-emails/&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;This method can be further enhanced by using email filters to automatically sort emails into different folders of your inbox, though I personally don&#39;t receive enough emails in my &amp;quot;real&amp;quot; inbox to warrant that level of organization. The 4 emails a week I get are easy enough to handle without the extra tooling. That may change if I begin receiving more emails from contacts and real humans.&lt;/p&gt;
&lt;h1&gt;It&#39;s Not Just Email&lt;/h1&gt;
&lt;p&gt;Fixing your email is a great move, it means you don&#39;t miss things. You come off to others as a more put together person. It reduces stress personally from your life. And the fact that it&#39;s such a simple move really is a major selling point on this idea. You don&#39;t need to do anything drastic, just make a new email (or clean up an existing one, unsubscribing from a few emails you&#39;re currently getting on it), and maybe apply some inbox filters if you plan on getting a lot of important messages. This idea is great, and it has a lot of room for further application. We can use the full potential of computing to become more efficient in as many ways as we feel creative, inspired, and compelled to explore. I&#39;d like to detail some of these other tricks you can use. All of these are going to be 1) simple and 2) offer non-negligible payouts for minimal effort.&lt;/p&gt;
&lt;h1&gt;Text Documents&lt;/h1&gt;
&lt;p&gt;Having a folder on your computer, just for general working notes is really important to me. I think anyone who works on a computer should have such a thing. Inside of it, you can include all kinds of things. There&#39;s of course your general todo lists (I do my day-to-day lists analog, keeping only big picture stuff digital), but then there&#39;s all the notes you need for remembering small details on a project you&#39;re handling, or for creative thinking while working through a fuzzy problem, or for keeping track of changing details regarding something as time goes by.&lt;/p&gt;
&lt;p&gt;I personally advocate for using them as simple text files, using .txt or .md extensions. You don&#39;t need to use a Word Document file to do this. Text files are easy to open -- virtually any program will accept them -- and they don&#39;t obscure anything. Their pure simplicity is a factor of freedom, not constraint. The fact that it&#39;s just text, often rendered in a monospace font, means you are given a free canvas with which to format and organize your document. The simplicity is the point.&lt;/p&gt;
&lt;p&gt;If you don&#39;t want to use a raw text file, don&#39;t. But if you&#39;re like me, and are comfortable editing files from raw text editors like vim, or on other operating systems, Notepad, I recommend doing it this way.&lt;/p&gt;
&lt;p&gt;(As a side note, if you happen to be looking for a better way to keep all of your endless notes organized, I recommend giving VimWiki a look. It&#39;s an easy to install extension for Vim, the terminal-based text editor. It allows you to put hyperlinks into your text documents that point to one another. It&#39;s also got a lot of quality of life features that are great, but I don&#39;t want to derail too far by going into depth about it. I&#39;ll let you look into it yourself.)
&lt;br&gt;
&lt;br&gt;
  &lt;a href=&quot;https://vkc.sh/vimwiki-101/&quot;&gt;https://vkc.sh/vimwiki-101/&lt;/a&gt;
&lt;br&gt;
&lt;br&gt;
  &lt;a href=&quot;https://tinkerbetter.tube/w/6hrXmYYNMjBGJnSE8iJ6NM&quot;&gt;https://tinkerbetter.tube/w/6hrXmYYNMjBGJnSE8iJ6NM&lt;/a&gt;
&lt;br&gt;
&lt;br&gt;
  &lt;a href=&quot;https://vimwiki.github.io/&quot;&gt;https://vimwiki.github.io/&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;The use of these files is incredible. Not just for writing simple notes, but you can generate detailed logs which will be useful to you as a reference guide. Take, for instance, the idea of a Suspense File. This list is used in order to track not your own progress, but to track things you&#39;re waiting on others to do. It&#39;s not designed to track them in some controlling, &amp;quot;hurry up and stop making me wait&amp;quot; kind of way. It&#39;s more like &amp;quot;oh wow, me and Rachel were talking about doing xyz, but it&#39;s been 2 weeks since any news from her. She&#39;s probably too busy to make it all work out in time. Let&#39;s take a look. If she&#39;s making progress, it would be good to know about it, and if not, I&#39;ll give her an out and let her off the hook if she needs it.&amp;quot; The idea is that people are busy, and the natural tendencies of people working together on a stagnant project is to just let it silently fall through. The point of the suspense file is to make sure if it does fall through, it&#39;s because you identified that one of you lacked in the time or resources necessary to make it work, and explicitly communicated that you wanted to drop the project.&lt;/p&gt;
&lt;p&gt;That tends to be the more useful aspect of using lists. Lists don&#39;t help you know what to do, they help you decide what you &lt;em&gt;aren&#39;t&lt;/em&gt; going to do. Which projects you don&#39;t have time for, and need to ditch.&lt;/p&gt;
&lt;p&gt;The suspense file works like this. Each line is a new entry. You can organize it however you like, but this is the method I use, and it&#39;s the one Cory Doctorow describes, which is where I learned of the concept in the first place.&lt;/p&gt;
&lt;p&gt;Each line starts with &amp;quot;&lt;code&gt;WAITING&lt;/code&gt;&amp;quot;, followed the category. After that, you describe who you&#39;re waiting on, and for what specifically. Finally, add a trailing string of dates for whenever a new development is made. If you communicate back and forth with someone for 3 weeks on a project, you might see over a dozen dates appended to the end of this line. The idea is that it gives you an idea of how long you&#39;ve been trying to get the ball rolling on something, and how many interactions have taken place so far.
&lt;br&gt;
&lt;br&gt;
  &lt;a href=&quot;https://pluralistic.net/2024/10/26/one-weird-trick/&quot;&gt;https://pluralistic.net/2024/10/26/one-weird-trick/&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;An example (fake) entry might look like this:&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;WAITING Email from Prof. J on CS Club availability for advisorship 2/12, 2/16, 2/20&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After 3 separate interactions about it, I might decide that she&#39;s too busy and start looking into other options. On the other hand, she might have just been temporarily bogged down, but will be free again starting next week, and that fact just needs to be communicated. Either way, it helps me identify the progress or stagnation of a plan, and easily track whether I need to reach out.&lt;/p&gt;
&lt;p&gt;Again, the point isn&#39;t to control anyone, or be an incessant nag (that would be weird). The point is to identify which projects are lagging behind secretly without being noticed, so I can communicate with others involved, and see if this is something that can be remedied somehow, or if we need to drop the project in pursuit of other aims that are demanding more of our time.&lt;/p&gt;
&lt;h1&gt;Keeping Up With Updates&lt;/h1&gt;
&lt;p&gt;In our age of information overload, where we are often expected to stay up to date with a number of ever changing events at 400 words a second, it can be helpful to institute some simple practices that greatly help us to manage all that information we&#39;re expected to take in regularly. We want both to be able to quickly have access to that information without too much mental strain on actually &lt;em&gt;trying to find it&lt;/em&gt;, as well as wanting a system in place that allows us to know which information sources we &lt;em&gt;still haven&#39;t looked at yet&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The first is simple, we want some database of all our sources like blogs, news sites, product updates, etc in a singular place where we can quickly check all of them. The second goal is a little more nuanced. Perhaps we spent the first 15 minutes of the day checking through our updates, but get cut off before checking the last one. Or, for instance, perhaps we&#39;re following a large number of publication sources, but each source only puts out a small number of articles per month. Many times we check, there will be nothing new. It would be worth having a kind of system that keeps track of which source has received updates lately, and which ones we don&#39;t need to bother checking in on yet.&lt;/p&gt;
&lt;p&gt;Lucky for us, a tool for this already exists that covers both of our needs at once. It&#39;s called RSS feeds (or sometimes &amp;quot;Atom feeds&amp;quot;. I think there&#39;s a nuanced difference between them, but from the perspective of a user, they function exactly the same). You can follow the RSS feed of a publication source online, such as a blog or many news sites. You will store these feed links into an application called an RSS Reader. There&#39;s a lot of apps to choose from, but I personally like to use Mozilla Thunderbird for it. That way, it&#39;s stored in a folder right next to my emails inside of the same program. You can use something else if you like, there&#39;s plenty of options to choose from if you just care to do a quick search online.&lt;/p&gt;
&lt;p&gt;When you subscribe to a particular feed through your app, it shows up as a little folder of updates. When you click on the folder, it shows you any recent posts from that source. Unread posts are highlighted a different color so you know you haven&#39;t seen them yet. You can read the title of each post and decide if it&#39;s worth your time or not. I&#39;m currently following over a dozen feeds, though checking through them often only takes a little bit of time each day. Some days, I use it to keep up with light, enjoyable reading from popular posts on the Bearblogs blogging platform.
&lt;br&gt;
&lt;br&gt;
  &lt;a href=&quot;https://bearblog.dev/discover/&quot;&gt;https://bearblog.dev/discover/&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;I also use it to keep up with the news, dev updates relating to Arch Linux, or other projects I&#39;m following, podcasts I listen to, and noteworthy blogs I follow outside of the Bearblogs trending page.&lt;/p&gt;
&lt;p&gt;Most sites that post regular articles will have an RSS feed you can follow somewhere. Heck, even YouTube provides one for each channel, even if they don&#39;t necessarily advertise about it, or make it easy to find. I use an online tool to convert channel links into RSS feeds.
&lt;br&gt;
&lt;br&gt;
  &lt;a href=&quot;https://ytrss.pesky.moe/&quot;&gt;https://ytrss.pesky.moe/&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;Without RSS&lt;/h2&gt;
&lt;p&gt;If you don&#39;t have an RSS feed for a site, you get two options. Either don&#39;t follow their updates, or find a way to follow it anyways. An easy way to do the second option is to create a basic &amp;quot;startup&amp;quot; bookmarks folder in your web browser. Every time you check your RSS feeds, you&#39;ll also open that startup folder, comb through if anything demands your attention, closing each tab once you&#39;re finished. This should take usually take a few minutes each day, unless you&#39;re putting a bunch of news sources into this folder, which I would not recommend.&lt;/p&gt;
&lt;p&gt;You can also use these folders to check up on special pages that require you to log in to your account to view. If you&#39;re trying to follow the shipping on a particular product you&#39;ve purchased, or check if some important lab result from your hospital has been posted to your account yet, rather than stressing about it, you can just right click your folder and &amp;quot;Open All Bookmarks&amp;quot;. Comb through if an update has been posted, and be done in less than 5 minutes. Once you&#39;ve received the update you were waiting on, you can delete the bookmark if you no longer need to check it regularly. You can always add it back again later if you get more labs done, or buy another product.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The point is that each of these tricks are &lt;em&gt;dead simple&lt;/em&gt;. They each provide moderate to high payouts for realistically small effort required to institute them. They utilize the power of computing to solve problems that computers are uniquely capable of solving efficiently.&lt;/p&gt;
&lt;p&gt;This article has largely been inspired by the general principles laid out in Cory Doctorow&#39;s post on Suspense Files (linked above), as well as his Lifehacking liveblog he links to at the beginning of that post. The idea that people who are keen with technology can use that technology in ways beyond just what everyone else is already doing (often without much thinking on the matter). To actually think critically about the tools at your disposal and find clever ways to use them that makes you accomplish more, it&#39;s a simple idea but it&#39;s also incredibly powerful.
&lt;br&gt;
&lt;br&gt;
  &lt;a href=&quot;https://craphound.com/lifehacksetcon04.txt&quot;&gt;https://craphound.com/lifehacksetcon04.txt&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;I&#39;m only really just starting down the path of experimenting with and discovering creative ideas like the ones I&#39;ve laid out in this post. If you&#39;ve got any of your own that I didn&#39;t mention and you think I&#39;d like it, I&#39;d be happy to hear from you. You can feel free to shoot me an &lt;a href=&quot;https://rseeber.github.io/about.html&quot;&gt;email&lt;/a&gt; telling me all about it. I love getting emails from real people -- it&#39;s the explicit reason that I ever went about cleaning my inbox in the first place.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Web Was Designed to Be Open</title>
    <link href="https://rseeber.github.io/post/the-web-was-designed-to-be-open/" />
    <updated>2025-07-15T01:42:04Z</updated>
    <id>https://rseeber.github.io/post/the-web-was-designed-to-be-open/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;July 13, 2025&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;The Free and Open Web&lt;/h1&gt;
&lt;p&gt;The internet is a truly incredible thing. Founded on the principle of shared ownership, the internet does not belong to any one group or person, it is shared by all of us. There is no single group you must go through in order to access the internet, nor in order to host an online service. There is no single set of rules governing what is and is not allowed to be posted on the internet. The internet deters censorship because new sovereign territory can be created online simply by hosting a server. With that server, you are created a new space on the internet, a new node added to the network. Within that node, you are free to do anything you like, so long as it is legal in the country you&#39;re hosting it in -- otherwise you might get some knocks on your door IRL.&lt;/p&gt;
&lt;p&gt;The internet being this way means that it cannot be controlled, truncated, censored, or destroyed by any overzealous entities -- be they politicians, tech corporations, or otherwise anyone else with the power to attempt a move like that. The internet remains strong, unfettered by the whims of would-be autocrats.&lt;/p&gt;
&lt;p&gt;Contrast this model with the model we use for many of the online serves common throughout our society. Social Media is almost universally done using a centralized model. You use some service, say Facebook for example. You download an app provided to you by the Facebook corporation. When you want to post your social content online, you upload it through that app up to the Facebook servers. No new or sovereign land is created in this process, all media is retained on the already existing Facebook node. There is no way to host a new node, and let the content on that node be visible as regular Facebook content through the app.&lt;/p&gt;
&lt;p&gt;Even if you wanted to host a new server, some piece of sovereign territory upon the web. You would be free to do so, but your content would not show up on the Facebook network. Users would have to leave the Facebook app in order to view your content. There would be no way to view both Facebook content and your content using the same app.&lt;/p&gt;
&lt;h1&gt;The Free and Open Social Net?&lt;/h1&gt;
&lt;p&gt;But it doesn&#39;t have to be this way. What if we created a social media that worked the same way that the web does? Where the social network consists of distinct nodes controlled and operated by separate people? Those people could each set the rules of what is and is not allowed to exist on their node -- rather than having all content moderation be mandated by a single controlling authority like Facebook? Much like the web, we could create open standards for this technology. That way, anyone can create a program that can view this content. For the web, we called it Web Browsers, for social media, it will be a Social Media Client. A developer will have access to the standard, and will be free to implement any additional features, or organize the app in any way they see fit. We will not be bound and stuck with the design decisions of a single corporation. Users with different tastes will be enabled to cater to their own preferences for visual design of the interface that they want to use.&lt;/p&gt;
&lt;p&gt;Many people reading this who have been in tech and hacker spaces long enough may be thinking right now of the decentralized alternatives to corporate social media. Mastodon and Bluesky both come to mind as possible contenders. For Bluesky, I will be brief and say that it is 1) not ready yet as a developed platform, and 2) it is not making enough significant strides for true decentralization. If Bluesky were to disappear from the internet tomorrow, there would not be a feasible way for the rest of the community to continue hosting the network without updating the protocol first.
&lt;br&gt;
&lt;br&gt;
  &lt;a href=&quot;https://tormentnexus.substack.com/i/152261629/a-protocol-not-a-platform&quot;&gt;https://tormentnexus.substack.com/i/152261629/a-protocol-not-a-platform&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
As for Mastodon, while it is a truly decentralized network that can be entirely run without the help of any centralized authority, the underlying ActivityPub protocol that it relies on is both complicated and confusing, as well as overly vague, leaving many important questions unanswered in the specification, leading to much confusion for developers. The protocol is perhaps a good basis on which to build an actually concrete protocol, but in my own honest opinion, it is overly complicated, and a drain of the valuable time and resources of an open source community of intelligent developers. 
&lt;p&gt;Dennis Schubert, a project manager for the Diaspora* project -- another attempt at a social media network, although much smaller that both Bluesky or ActivityPub -- wrote a pretty good article on the issues with the ActivityPub protocol. In that article, he also lays out some of the bigger flaws in the existing Diaspora* project that make it also unsuitable in many ways, but I&#39;ll leave that to you to look into.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
  &lt;a href=&quot;https://overengineer.dev/blog/2019/01/13/activitypub-final-thoughts-one-year-later/&quot;&gt;https://overengineer.dev/blog/2019/01/13/activitypub-final-thoughts-one-year-later/&lt;/a&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;A Clean, Simple Design&lt;/h2&gt;
&lt;p&gt;I propose a simpler way of doing things. I&#39;m not going to put forward a concrete protocol, as I&#39;m only just starting to work on these ideas myself, but I&#39;d like to lay down the groundwork for what I think should someday become a solid protocol. The so-called &amp;quot;UNIX design principles&amp;quot; promote simplicity and modularity in all things that you create. Each module of your project should do one thing, and do that one thing well. Further modules can be appended to the overall project in order to create a program (or protocol, in our case) that can do many things. Our new protocol would work something like this. You may ignore the more specific details of this description in favor of the general principles I&#39;m trying to isolate in how I create this example. The point is simplicity, which we will achieve through modularity.
&lt;br&gt;
&lt;br&gt;
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Unix_philosophy&quot;&gt;https://en.wikipedia.org/wiki/Unix_philosophy&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
You would have two sides to the network. There would be clients, AKA &quot;users&quot;, and then there are the servers, which host the content for the users. A user would be free to host their content in any number of ways. It would be a very similar experience to that of hosting a web server. You are free to host it yourself if you know how to, or you may turn to any number of middle men who will do it for you. In the world of the web, this would be services like Wordpress, Medium, NeoCities, GitHub Pages, etc. Unlike ActivityPub, very little server-to-server interaction would occur, if any. When you as a user want to look at a post by your friend, your client software would request the content directly from their server. If you want to interact with that content (commenting, liking, etc), that interaction would be sent to and stored directly on the server where the original post is stored. The post would not be shared around with other servers like it does in the ActivityPub protocol. This is done to simplify things, and reduce scaling difficulties.
&lt;p&gt;As for the design of the clients, and the specific toolings used, feed content would be generated as an RSS feed for each user. So if you are following 5 friends, your client would fetch 5 RSS feeds at refresh time, looking for any posts inside of those 5 feeds that you have not yet seen, and then putting it on your timeline. Content itself would likely be stored as HTML or XML, or something of the sort. The benefit being that we do not need to teach the client software how to handle all 48 thousand content types, from image posts, to videos, to microblogs, to audio notes, to story posts. Instead, we could just encode the content using an extensible format like html or xml that support embedding tags for any content type imaginable. If you want to do an image post, your client software will simply embed an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag into the post. For microblogging, it will put text inside of the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag. Use a format like html and you can encode anything you desire, even things which the designers of this future protocol couldn&#39;t have imagined.&lt;/p&gt;
&lt;p&gt;The idea here is that we&#39;re re-using existing protocols and tools. This lets us re-use technologies for understanding those protocols. Web apps already know how to render HTML, we can simply use the existing engine for reading it. There are plenty of libraries around for reading RSS and XML feeds as machine readable data.&lt;/p&gt;
&lt;p&gt;In keeping with this idea, we would also want to create some kind of direct messaging service within the standard, for when users would like to communicate with one another. Perhaps we could use a protocol like XMPP or something similar. The fantastic benefit of this is that smaller servers which don&#39;t want to handle storing direct messages could offshore their implementation of XMPP to another server that they simply point to in their metadata file for the user. Perhaps a server might have a user called Alice. She has an account on this server at &lt;code&gt;https://example.com/alice&lt;/code&gt;, but the metadata file (perhaps &lt;code&gt;https://example.com/alice/index.xml&lt;/code&gt;), lists that her messaging endpoint is at &lt;code&gt;https://external-server.net/alice&lt;/code&gt;. Thus, when a user wants to message Alice, they will send an XMPP message directly to Alice at that endpoint on a separate server. Perhaps our example server would even handle the user credentials for the external server, making sure login details always match with the main server.&lt;/p&gt;
&lt;p&gt;Should they wish, a user would even be free to hand pick the XMPP server they want to use. Maybe they could do so in order to reduce the number of message inboxes they have, so they can re-use an already existing account to use for their social media DMs as well.&lt;/p&gt;
&lt;h1&gt;Closing&lt;/h1&gt;
&lt;p&gt;Perhaps some of the specific recommendations for the protocol wouldn&#39;t be perfect. A lot more thinking needs to go into this kind of thing. But as it stands right now, we are very dry on alternatives to the corporate social media platforms that are seen by many as the only real choice available. Creating social media in a way that mimics the shape of the free and open Web in my estimations would leave the world better off, assuming we could actually get it to take off from the ground, achieving a tangible level of success in terms of users and community support.&lt;/p&gt;
</content>
  </entry>
</feed>